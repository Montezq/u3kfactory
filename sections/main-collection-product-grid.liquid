{{ 'component-price.css' | asset_url | stylesheet_tag }}

<div
  class="section-{{ section.id }} pb-12 collection-product-grid{% if collection.products.size == 0 %} collection__empty{% endif %}"
  id="product-grid-wrapper"
>
  {%- paginate collection.products by 24 -%}
    <div class="collection__wrapper flex flex-col">
      {%- if collection.products.size > 0 -%}
        <div class="collection-hero lg:sticky pb-9 top-[27px] bg-gray-10 lg:bg-white z-[2]">
          <div class="pb-5 lg:pb-2.5">
            <h1 class="collection-hero__title text-3xl font-coutureBold text-center">
              <span class="visually-hidden">{{ 'sections.collection_template.title' | t }}: </span>
              {%- if section.settings.heading != blank -%}
                {{ section.settings.heading }}
              {%- else -%}
                {{- collection.title | escape -}}
              {%- endif -%}
            </h1>
          </div>
          <div class="flex max-lg:flex-col lg:items-center relative">
            <div class="lg:mr-6 max-lg:mt-4">
              <button class="uppercase font-semibold text-[13px] tracking-wider open-filter">
                + Filters (<span class="filter_counter">0</span>)
              </button>
            </div>
            <div class="w-full lg:w-[162px] mt-0.5 max-lg:-order-1">
              {%- liquid
                assign value = 3
                if section.settings.grid_template == 'small'
                  assign value = 3
                elsif section.settings.grid_template == 'medium'
                  assign value = 2
                else
                  assign value = 1
                endif
              -%}
              <input
                class="w-full block range range-input"
                type="range"
                id="grid_template"
                name="Grid Template"
                min="1"
                max="3"
                value="{{ value }}"
                step="1"
              >
            </div>
            <div class="absolute top-6 lg:top-0 left-0 bg-gray-10 lg:bg-white z-[2] md:!w-full filter-modal pb-10 hidden">
              {%- liquid
                assign sort_by = collection.sort_by | default: collection.default_sort_by
                if collection.url
                  assign results_url = collection.url
                else
                  assign terms = collection.terms | escape
                  assign results_url = '?q=' | append: terms | append: '&options%5Bprefix%5D=last&sort_by=' | append: sort_by
                endif
              -%}
              <div class="flex">
                <div class="flex flex-col pr-[22px] mr-3 pt-1.5 relative after:content-[''] after:block after:w-[1px] after:h-[57px] after:absolute after:top-0 after:left-full after:bg-gray-100">
                  <button class="uppercase font-semibold text-[13px] tracking-wider close-filter text-gray-850 mb-2">
                    Close
                  </button>
                  <div
                    class="uppercase cursor-pointer font-semibold text-[13px] tracking-wider inline-block text-gray-600 filter__item-clear"
                    data-href="{{  results_url }}"
                  >
                    Clear
                  </div>
                </div>
                <div class="flex flex-wrap gap-5">
                  {%- for filter in collection.filters -%}
                    <div class="w-40 md:w-48">
                      <h3 class="uppercase font-bold mb-0.5 text-[13px] tracking-xwidest text-gray-850">
                        {{ filter.label | escape }}
                      </h3>
                      <ul>
                        {%- for value in filter.values -%}
                          {%- liquid
                            assign filter_active = false
                            assign filter_url = value.url_to_add
                            if value.active
                              assign filter_url = value.url_to_remove
                              assign filter_active = true
                            endif
                          -%}
                          <li>
                            <label class="block w-fit filter-label relative cursor-pointer">
                              <input
                                class="!w-0 !h-0 opacity-0 absolute top-0 left-0"
                                type="checkbox"
                                value="{{value.label}}"
                                {% if filter_active %}
                                  checked
                                {% endif %}
                              >
                              <div
                                data-href="{{ filter_url }}"
                                class="flex items-center filter__item uppercase font-bold text-[11px] tracking-widest text-gray-850"
                              >
                                <span>
                                  {{ value.label | escape }}
                                </span>
                                <span
                                  class="filter_checked w-[7px] h-[7px] bg-gray-850 ml-2 opacity-0 duration-300 ease-in-out"
                                ></span>
                              </div>
                            </label>
                          </li>
                        {%- endfor -%}
                      </ul>
                    </div>
                  {%- endfor -%}
                  <div class="w-40 md:w-48">
                    <h3 class="uppercase font-bold mb-0.5 text-[13px] tracking-xwidest text-gray-850">Added</h3>
                    <ul>
                      {%- assign sort_by = collection.sort_by | default: collection.default_sort_by -%}
                      {%- for option in collection.sort_options -%}
                        {%- if option.value contains 'created-descending' -%}
                          <li>
                            <label class="block w-fit filter-label relative cursor-pointer">
                              <input
                                class="!w-0 !h-0 opacity-0 absolute top-0 left-0"
                                type="radio"
                                name="sort_by"
                                value="{{ option.value | escape }}"
                              >
                              <div
                                data-href="?sort_by={{ option.value }}"
                                class="flex items-center filter__item uppercase font-bold text-[11px] tracking-widest text-gray-850"
                              >
                                <span> Newest First </span>
                                <span
                                  class="filter_checked w-[7px] h-[7px] bg-gray-850 ml-2 opacity-0 duration-300 ease-in-out"
                                ></span>
                              </div>
                            </label>
                          </li>
                        {%- elsif option.value contains 'created-ascending' -%}
                          <li>
                            <label class="block w-fit filter-label relative cursor-pointer">
                              <input
                                class="!w-0 !h-0 opacity-0 absolute top-0 left-0"
                                type="radio"
                                name="sort_by"
                                value="{{ option.value | escape }}"
                              >
                              <div
                                data-href="?sort_by={{ option.value }}"
                                class="flex items-center filter__item uppercase font-bold text-[11px] tracking-widest text-gray-850"
                              >
                                <span> Oldest First </span>
                                <span
                                  class="filter_checked w-[7px] h-[7px] bg-gray-850 ml-2 opacity-0 duration-300 ease-in-out"
                                ></span>
                              </div>
                            </label>
                          </li>
                        {%- endif -%}
                      {%- endfor -%}
                    </ul>
                  </div>
                  <div class="w-40 md:w-48 hidden lg:block">
                    {%- liquid
                      assign value = 3
                      if section.settings.grid_template == 'small'
                        assign value = 3
                      elsif section.settings.grid_template == 'medium'
                        assign value = 2
                      else
                        assign value = 1
                      endif
                    -%}
                    <input
                      class="w-full block range range-input mt-4"
                      type="range"
                      id="grid_template"
                      name="Grid Template"
                      min="1"
                      max="3"
                      value="{{ value }}"
                      step="1"
                    >
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      {%- endif -%}
      <div
        class="flex-1 w-full{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}"
        id="ProductGridContainer"
        {% if settings.animations_reveal_on_scroll %}
          data-cascade
        {% endif %}
      >
        {%- if collection.products.size == 0 -%}
          <div class="py-8 flex flex-col items-center" id="product-grid" data-id="{{ section.id }}">
            <div class="title-wrapper center">
              <h2 class="text-center text-4xl xl:text-[50px] uppercase tracking-widerx font-open">
                {{ 'sections.collection_template.empty_title' | t -}}
              </h2>
            </div>
            <div class="w-[352px] md:max-w-[70%] collection__empty-eye">
              {%- render 'icon-empty' -%}
            </div>
            <div>
              <h3 class="text-center uppercase text-[19px] xl:text-[25px] tracking-[0.3em] xl:tracking-[0.5em] font-open">
                {{ 'sections.collection_template.empty_products' | t }}
              </h3>
            </div>
            <div class="flex justify-center collection__empty-btn">
              <a class="btn btn_primary" href="{{ shop.url }}">
                {{ 'sections.collection_template.back_home' | t }}
              </a>
            </div>
          </div>
        {%- else -%}
          <div class="collection">
            <div class="loading-overlay gradient"></div>
            <ul
              id="product-grid"
              data-id="{{ section.id }}"
              class="grid collection-grid__list collection-grid__list-{{ section.settings.grid_template }}"
            >
              {%- for product in collection.products -%}
                {% assign lazy_load = false %}
                {%- if forloop.index > 4 -%}
                  {%- assign lazy_load = true -%}
                {%- endif -%}
                <li
                  class="grid__item{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}"
                  {% if settings.animations_reveal_on_scroll %}
                    data-cascade
                    style="--animation-order: {{ forloop.index }};"
                  {% endif %}
                >
                  {% render 'card-product', card_product: product, lazy_load: lazy_load, section_id: section.id %}
                </li>
              {%- endfor -%}
            </ul>

            {%- if paginate.pages > 1 -%}
              {% render 'pagination', paginate: paginate, anchor: '' %}
            {%- endif -%}
          </div>
        {%- endif -%}
      </div>
    </div>
  {%- endpaginate -%}
</div>
<script>
  document.addEventListener('DOMContentLoaded', function () {
    var rangeInputs = document.querySelectorAll('.range-input');
    var productList = document.getElementById('product-grid-wrapper');

    function updateGridClass(value) {
      productList.classList.remove(
        'collection-grid__list-small',
        'collection-grid__list-medium',
        'collection-grid__list-big'
      );
      switch (value) {
        case '1':
          productList.classList.add('collection-grid__list-big');
          break;
        case '2':
          productList.classList.add('collection-grid__list-medium');
          break;
        case '3':
          productList.classList.add('collection-grid__list-small');
          break;
      }
    }

    function syncRangeInputs(value) {
      rangeInputs.forEach(function (input) {
        input.value = value;
      });
      updateGridClass(value);
    }
    rangeInputs.forEach(function (input) {
      input.addEventListener('input', function () {
        syncRangeInputs(this.value);
      });
    });
    if (rangeInputs.length > 0) {
      updateGridClass(rangeInputs[0].value);
    }
  });
</script>
<script>
  document.addEventListener('DOMContentLoaded', function () {
    function filterToggle() {
      let openFilter = document.querySelector('.open-filter'),
        closeFilter = document.querySelector('.close-filter'),
        filterWrapper = document.querySelector('.filter-modal');
      if (!openFilter) return;
      openFilter.addEventListener('click', function () {
        filterWrapper.classList.add('!block');
      });
      closeFilter.addEventListener('click', function () {
        filterWrapper.classList.remove('!block');
      });
    }
    filterToggle();

    const updateFilterCounter = () => {
      const checkedFiltersCount = document.querySelectorAll('.filter-label input:checked').length;
      document.querySelectorAll('.filter_counter').forEach((counterElement) => {
        counterElement.textContent = checkedFiltersCount;
      });
    };

    // Event listener for click events within the document
    document.addEventListener('click', function (event) {
      const filterLink = event.target.closest('.filter__item');
      const filterClear = event.target.closest('.filter__item-clear');

      // Process clicks on filter items
      if (filterLink) {
        const urlToFetch = filterLink.getAttribute('data-href');
        fetchAndUpdateContent(urlToFetch);
      } else if (filterClear) {
        document.querySelectorAll('.filter-label input[type="checkbox"]').forEach((input) => {
          input.checked = false;
        });
        const urlToFetch = filterClear.getAttribute('data-href');
        fetchAndUpdateContent(urlToFetch);
      }
    });

    const fetchAndUpdateContent = (urlToFetch) => {
      fetch(urlToFetch)
        .then((response) => response.text())
        .then((htmlString) => {
          const parser = new DOMParser();
          const htmlDocument = parser.parseFromString(htmlString, 'text/html');
          // Update the main content area with the new HTML
          const newContent = htmlDocument.getElementById('ProductGridContainer').innerHTML;
          document.getElementById('ProductGridContainer').innerHTML = newContent;

          updateFilterCounter();
          // Update the data-href attributes for the filter items
          updateFilterLinks(htmlDocument);
        })
        .catch((error) => console.error('Error fetching filtered results:', error));
    };

    // Function to update filter links with new data-href values
    const updateFilterLinks = (htmlDocument) => {
      const newFilterLinks = htmlDocument.querySelectorAll('.filter__item');
      // Ensure to target the container that will definitely include all your .filter__item elements
      const currentFilterLinks = document.querySelectorAll('.filter__item');

      newFilterLinks.forEach((newLink, index) => {
        if (currentFilterLinks[index]) {
          // Update the current filter link with the new data-href attribute from the fetched content
          currentFilterLinks[index].setAttribute('data-href', newLink.getAttribute('data-href'));
        }
      });
      updateFilterCounter();
    };
    updateFilterCounter();
  });
</script>

{% schema %}
{
  "name": "t:sections.main-collection-product-grid.name",
  "class": "section",
  "settings": [
    {
      "type": "inline_richtext",
      "id": "heading",
      "label": "t:sections.main-collection-product-grid.settings.heading.label",
      "info": "t:sections.main-collection-product-grid.settings.heading.info"
    },
    {
      "type": "select",
      "id": "grid_template",
      "options": [
        {
          "value": "small",
          "label": "t:sections.main-collection-product-grid.settings.grid_template.options__1.label"
        },
        {
          "value": "medium",
          "label": "t:sections.main-collection-product-grid.settings.grid_template.options__2.label"
        },
        {
          "value": "big",
          "label": "t:sections.main-collection-product-grid.settings.grid_template.options__3.label"
        }
      ],
      "default": "small",
      "label": "t:sections.main-collection-product-grid.settings.grid_template.label"
    },
    {
      "type": "header",
      "content": "t:sections.main-collection-product-grid.settings.header__1.content"
    },
    {
      "type": "checkbox",
      "id": "enable_filtering",
      "default": true,
      "label": "t:sections.main-collection-product-grid.settings.enable_filtering.label",
      "info": "t:sections.main-collection-product-grid.settings.enable_filtering.info"
    },
    {
      "type": "checkbox",
      "id": "enable_sorting",
      "default": true,
      "label": "t:sections.main-collection-product-grid.settings.enable_sorting.label"
    }
  ]
}
{% endschema %}
