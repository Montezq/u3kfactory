{{ 'customer.css' | asset_url | stylesheet_tag }}

<div class="customer reset-password max-lg:px-4">
  <h1
    id="bar"
    class="font-coutureBold text-xl ds_element md:text-[30px] uppercase text-center max-lg:w-full max-lg:left-0 max-lg:py-2 fixed top-[52px]  bg-gray-10 lg:bg-white max-lg:duration-300 max-lg:ease-in-out"
  >
    Password Reset
  </h1>
  <div class="customer-login__form-wrapper max-w-[522px] mx-auto">
    <div class="customer-login__form-wrapper-heading text-center mb-10">
      <p class="uppercase text-xs md:text-sm font-bold">WRITE A NEW PASSWORD, AT LEAST 8 CHARACTERS IN LENGTH</p>
    </div>
    {%- form 'reset_customer_password',
      return_to: '/pages/account-slides#success-password-reset',
      id: 'reset-password-form'
    -%}
      <div class="field flex flex-col mb-3.5">
        <div class="pl-4 mb-1 flex justify-between">
          <label for="password" class="text-[11px] md:text-[13px] font-axis"> New password </label>
          <div class="form-errors hidden text-[10px] md:text-[13px] line-clamp-1 pl-5" id="password-error">
            <span> *Password must be at least 8 characters in length </span>
          </div>
          <div class="form-errors hidden text-[10px] md:text-[13px] line-clamp-1 pl-5" id="password-mismatch-error">
            <span> *Passwords do not match </span>
          </div>
        </div>
        <div class="relative password-input">
          <input
            type="password"
            name="customer[password]"
            id="password"
            autocomplete="new-password"
            class="input-field"
            {% if form.errors contains 'password' %}
              aria-invalid="true"
              aria-describedby="password-error"
            {% endif %}
          >
          <span
            class="absolute cursor-pointer text-[24px] md:text-[28px] toggle-password top-1/2 -translate-y-1/2 right-4 icon-FULL-ICON-SET-WEBSITE-FINAL_Eye-Icon"
          ></span>
        </div>
      </div>
      <div class="field flex flex-col">
        <div class="pl-4 mb-1">
          <label for="password_confirmation" class="text-[11px] md:text-[13px] font-axis"> Confirm password </label>
        </div>
        <div class="relative password-input">
          <input
            type="password"
            name="customer[password_confirmation]"
            id="password_confirmation"
            autocomplete="new-password"
            class="input-field"
            {% if form.errors contains 'password_confirmation' %}
              aria-invalid="true"
              aria-describedby="password_confirmation-error"
            {% endif %}
          >
          <span
            class="absolute cursor-pointer text-[24px] md:text-[28px] toggle-password top-1/2 -translate-y-1/2 right-4 icon-FULL-ICON-SET-WEBSITE-FINAL_Eye-Icon"
          ></span>
        </div>
      </div>
      <div class="flex justify-center mt-7">
        <button class="btn btn_primary !font-coutureBold !text-[22px] !tracking-xwidest !leading-none !px-6">
          {{ 'customer.reset_password.submit' | t }}
        </button>
      </div>
    {%- endform -%}
  </div>
</div>
<div class="removed-wishlist__modal hidden fixed top-1/2 left-[50%] lg:left-[62.3%] -translate-x-1/2 -translate-y-1/2 z-10 w-[96%] md:w-full max-w-fit">
  <div
    class="border border-[#5a5a5a] bg-white px-4 py-3.5 removed-wishlist__modal-wrapper w-full"
    aria-modal="true"
    role="dialog"
    tabindex="-1"
  >
    <div class="removed-wishlist__modal-heading text-center">
      <h2 class="text-[21px] sm:text-[24px] uppercase tracking-xwidest whitespace-nowrap">
        Password changed successfully
      </h2>
    </div>
  </div>
</div>
<script>
  // Function to toggle password visibility
  function togglePasswordVisibility(event) {
    const toggleButton = event.currentTarget;
    const passwordInput = toggleButton.closest('.password-input').querySelector('.input-field');
    toggleButton.classList.toggle('visible');
    if (passwordInput.type === 'password') {
      passwordInput.type = 'text';
    } else {
      passwordInput.type = 'password';
    }
  }

  // Ensure the DOM is fully loaded before attaching event listeners
  document.addEventListener('DOMContentLoaded', () => {
    const togglePasswordButtons = document.querySelectorAll('.toggle-password');

    // Loop through each toggle button and attach a click event listener
    togglePasswordButtons.forEach((button) => {
      button.addEventListener('click', togglePasswordVisibility);
    });
    document.getElementById('reset-password-form').addEventListener('submit', function (event) {
      const password = document.getElementById('password').value;
      const confirmPassword = document.getElementById('password_confirmation').value;
      const passwordError = document.getElementById('password-error');
      const passwordMismatchError = document.getElementById('password-mismatch-error');

      // Reset error display
      passwordError.classList.add('hidden');
      passwordMismatchError.classList.add('hidden');

      // Check if password is at least 8 characters long
      if (password.length < 8) {
        event.preventDefault(); // Prevent form submission
        passwordError.classList.remove('hidden'); // Show error message for short password
      } else if (password !== confirmPassword) {
        event.preventDefault(); // Prevent form submission
        passwordMismatchError.classList.remove('hidden'); // Show error message for password mismatch
      } else {
        event.preventDefault(); // Prevent form submission to show instructionsSent modal
        const instructionsSent = document.querySelector('.removed-wishlist__modal');
        instructionsSent.classList.remove('hidden');
        setTimeout(() => {
          instructionsSent.classList.add('hidden');
          document.getElementById('reset-password-form').submit();
        }, 1000);
      }
    });
  });
</script>

{% schema %}
{
  "name": "t:sections.main-reset-password.name",
  "settings": [
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    }
  ]
}
{% endschema %}
