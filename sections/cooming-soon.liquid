<div class="w-full h-screen flex flex-col items-center relative overflow-hidden">
  {%- if section.settings.background != blank -%}
    {%- liquid
      assign image_height = section.settings.background.width | divided_by: section.settings.background.aspect_ratio
      assign full_width = '100vw'
      assign widths = '2000, 3000, 3840'
      assign image_class = 'absolute top-0 left-0 w-[100vw] h-full object-cover max-w-none'
    -%}
    {{
      section.settings.background
      | image_url: width: 3840
      | image_tag:
        width: section.settings.image.width,
        height: image_height,
        class: image_class,
        sizes: full_width,
        widths: widths,
        fetchpriority: 'high'
    }}
  {%- endif -%}
  <div class="relative z-[1] flex flex-col items-center text-center my-auto">
    <div class="cooming-soong__logo pb-[66px]">
      <h1 class="font-coutureBold text-[136px] text-white text-logo leading-none flex items-center">
        <span>U</span>
        <span>3</span>
      </h1>
    </div>
    {%- if section.settings.heading != blank or section.settings.subgheading != blank -%}
      <div class="text-white leading-none">
        {%- if section.settings.heading != blank -%}
          <h2 class="text-[40px] font-helveticaThinCond tracking-widest pb-[38px] mb-[42px] cooming-soong__devider relative after::content-[''] after:block after:absolute after:top-full after:left-1/2 after:-translate-x-1/2 after:max-w-[465px] after:min-w-[260px] after:w-[80%] after:h-[1px] after:bg-white">
            {{ section.settings.heading }}
          </h2>
        {%- endif -%}
        {%- if section.settings.subgheading != blank -%}
          <h3 class=" font-helveticaThinCond text-[40px] tracking-xlwidest">{{ section.settings.subgheading }}</h3>
        {%- endif -%}
      </div>
    {%- endif -%}
    <div class="mt-[208px] max-w-[600px] w-full mx-auto">
      {% form 'customer', class: 'newsletter-form', id: 'newsletter-form' %}
        <input type="hidden" name="contact[tags]" value="newsletter">
        <div class="newsletter-form__field-wrapper">
          <div class="flex items-end">
            <input
              id="NewsletterForm--{{ section.id }}"
              type="email"
              name="contact[email]"
              value="{{ form.email }}"
              aria-required="true"
              autocorrect="off"
              autocapitalize="off"
              autocomplete="email"
              class="flex-1 mr-5 bg-transparent border-b border-b-white placeholder:text-white text-white"
              {% if form.errors %}
                autofocus
                aria-invalid="true"
                aria-describedby="Newsletter-error--{{ section.id }}"
              {% elsif form.posted_successfully? %}
                aria-describedby="Newsletter-success--{{ section.id }}"
              {% endif %}
              placeholder="{{ 'newsletter.label' | t }}"
            >
            <div class="checkbox captcha">
              <input type="text" class="honeypot" autocomplete="off" style="display:none;">
            </div>
            <button
              type="submit"
              class="bg-black font-axis text-xl py-[5px] px-3 uppercase text-white whitespace-nowrap tracking-wider"
              name="commit"
              id="submitNewsletter"
              aria-label="{{ 'newsletter.keep_updated' | t }}"
            >
              {{ 'newsletter.keep_updated' | t }}
            </button>
          </div>
        </div>
        {%- if form.posted_successfully? -%}
          <h3
            class="newsletter-form__message newsletter-form__message--success form__message"
            id="Newsletter-success--{{ section.id }}"
            tabindex="-1"
            autofocus
          >
            {% render 'icon-success' -%}
            {{- 'newsletter.success' | t }}
          </h3>
        {%- endif -%}
      {% endform %}
    </div>
  </div>
</div>
<script>
  function formToJSON(elements) {
    return [].reduce.call(
      elements,
      function (data, element) {
        data[element.name] = element.value;
        return data;
      },
      {}
    );
  }

  // Get Shopify Friendly URL String
  function getUrlString(data) {
    var urlParameters = Object.entries(data)
      .map(function (e) {
        return e.join('=');
      })
      .join('&');

    return urlParameters;
  }

  function ajaxFormInit(form) {
    var inputs = form.querySelectorAll('[name]'),
      alert = form.querySelector('[data-alert="status"]'),
      alert_msgs = form.querySelector('.form-alerts');

    form.addEventListener('submit', function (e) {
      e.preventDefault();

      var action = form.getAttribute('action');

      if (alert_msgs) {
        var alert_msg = JSON.parse(alert_msgs.innerHTML);
      }

      console.log('Form Action: ' + action);
      console.log('Submitting form...');

      fetch(action, {
        method: 'POST',
        body: getUrlString(formToJSON(inputs)),
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
          Accept: 'text/html, */*; q=0.01',
          'X-Requested-With': 'XMLHttpRequest',
        },
      })
        .then(function (response) {
          console.log(response);
          console.log(response.status);

          if (alert) {
            alert.className = 'alert alert-success';
            alert.innerHTML = alert_msg.success;
          }
        })
        .catch(function (err) {
          console.error(err);

          if (alert) {
            alert.className = 'alert alert-error';
            alert.innerHTML = alert_msg.error;
          }
        });
    });
  }

  // Init Shopify Forms
  document.querySelectorAll('.newsletter-form').forEach(function (form) {
    ajaxFormInit(form);
  });
</script>

{% schema %}
{
  "name": "t:sections.cooming-soon.name",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "image_picker",
      "id": "background",
      "label": "t:sections.cooming-soon.settings.banner.label"
    },
    {
      "type": "inline_richtext",
      "id": "heading",
      "label": "t:sections.cooming-soon.settings.heading.label"
    },
    {
      "type": "inline_richtext",
      "id": "subgheading",
      "label": "t:sections.cooming-soon.settings.subheading.label"
    }
  ],
  "presets": [
    {
      "name": "t:sections.cooming-soon.presets.name"
    }
  ]
}
{% endschema %}
