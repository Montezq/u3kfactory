<div class="share__modal hidden fixed w-full h-[100dvh] z-[99999]">
  <div class="relative w-full h-full flex pt-[60px] pb-4 overflow-y-auto">
    <div class="my-auto relative left-[50%] lg:left-[62.3%] -translate-x-1/2 z-10 max-w-[320px] sm:max-w-[471px]">
      <button
        type="button"
        class="share__modal-close modal__close-button absolute bottom-full mb-4 right-0 w-7 md:w-[34px] h-7 md:h-[34px] rounded-full leading-none flex justify-center items-center cursor-pointer"
        aria-label="{{ 'accessibility.close' | t }}"
      >
        <span class="icon-FULL-ICON-SET-WEBSITE-FINAL_Grey-X-Button text-[28px] md:text-[34px]"
          ><span class="path1"></span><span class="path2"></span
        ></span>
      </button>
      <div
        class="border border-[#5a5a5a] bg-white px-[18px] pt-8 share__modal-wrapper"
        aria-modal="true"
        role="dialog"
        tabindex="-1"
      >
        <div class="share__modal-body mb-[40px]">
          <ul class="share__list grid grid-cols-4 gap-x-8 gap-y-20 pt-11 pb-16">
            {%- for block in section.blocks -%}
              <li class="share__item">
                {%- if block.settings.share_url -%}
                  <a
                    href="{{ block.settings.share_url }}"
                    target="_blank"
                    class="flex flex-col items-center text-center justify-center"
                  >
                    {%- if block.settings.icon -%}
                      <div class="w-6 sm:w-8 h-6 sm:h-8 mb-3.5">
                        <span class="text-[24px] sm:text-[32px] {{ block.settings.icon }}"></span>
                      </div>
                    {%- endif -%}
                    {%- if block.settings.title -%}
                      <div class="text-xs sm:text-[14px] uppercase leading-none tracking-[.1em] font-semibold">
                        {{ block.settings.title }}
                      </div>
                    {%- endif -%}
                  </a>
                {%- endif -%}
              </li>
            {%- endfor -%}
          </ul>
        </div>
      </div>
    </div>
  </div>
</div>
<div class="link-copied__modal hidden border bg-white py-3 z-[999999] md:py-[18px] px-2 md:px-3.5 border-black fixed top-1/2 left-[50%] lg:left-[62.3%] -translate-x-1/2 -translate-y-1/2 w-[96%] md:w-full max-w-fit">
  <p class="uppercase text-lg md:text-2xl tracking-xwidest text-center whitespace-nowrap">Link Copied</p>
</div>
<script>
  function initializeShareModal() {
    const shareButtons = document.querySelectorAll('.share-button'),
      shareModal = document.querySelector('.share__modal'),
      shareModalBody = document.querySelector('.share__modal-wrapper'),
      shareItems = document.querySelectorAll('.share__item a'),
      shareClose = document.querySelector('.share__modal-close'),
      bodyEl = document.querySelector('body'),
      linkCopiedModal = document.querySelector('.link-copied__modal');

    function resetShareItemsHref() {
      shareItems.forEach((item) => {
        const originalHref = item.getAttribute('data-original-href');
        if (originalHref) {
          item.setAttribute('href', originalHref);
        }
      });
    }

    function copyToClipboard(text) {
      navigator.clipboard
        .writeText(text)
        .then(() => {
          linkCopiedModal.classList.remove('hidden');
          setTimeout(() => {
            linkCopiedModal.classList.add('hidden');
          }, 1600);
        })
        .catch((err) => {
          console.error('Could not copy text: ', err);
        });
    }

    shareButtons.forEach((button) => {
      button.addEventListener('click', () => {
        const dataUrl = button.getAttribute('data-url');

        shareItems.forEach((item) => {
          const originalHref = item.getAttribute('data-original-href') || item.getAttribute('href');
          item.setAttribute('data-original-href', originalHref);

          if (originalHref === '#copy') {
            item.addEventListener('click', (e) => {
              e.preventDefault();
              copyToClipboard(dataUrl);
            });
          } else {
            item.setAttribute('href', `${originalHref}${encodeURIComponent(dataUrl)}`);
          }
        });

        shareModal.classList.remove('hidden');
        bodyEl.classList.add('overflow-hidden');
      });
    });

    function closeModal() {
      resetShareItemsHref();
      shareModal.classList.add('hidden');
      bodyEl.classList.remove('overflow-hidden');
    }

    shareClose.addEventListener('click', closeModal);

    shareModal.addEventListener('click', (event) => {
      if (!shareModalBody.contains(event.target)) {
        closeModal();
      }
    });
  }
  document.addEventListener('DOMContentLoaded', function () {
    initializeShareModal();
  });
</script>

{% schema %}
{
  "name": "Share Popup",
  "settings": [],
  "blocks": [
    {
      "type": "share_item",
      "name": "Share Item",
      "settings": [
        {
          "type": "text",
          "id": "icon",
          "label": "Icon Font Name"
        },
        {
          "type": "inline_richtext",
          "id": "title",
          "label": "Socials Name"
        },
        {
          "type": "url",
          "id": "share_url",
          "label": "Socials Share Url"
        }
      ]
    }
  ]
}
{% endschema %}
